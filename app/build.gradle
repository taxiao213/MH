apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao' // apply plugin
apply plugin: 'walle'
android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"
    defaultConfig {
        applicationId "com.haxi.mh"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }

    //签名 引用位置
    signingConfigs {
        config {
            storeFile file("E:\\project\\MH\\MH.jks")
            storePassword "mh123456"
            keyAlias "key_mh"
            keyPassword "mh123456"
            v2SigningEnabled true
        }
    }

    buildTypes {

        release {
            //混淆
            minifyEnabled true
            //移除无用的resource文件
            shrinkResources true
            //Zipalign优化
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }

        debug {
            signingConfig signingConfigs.config
        }

        debug { //在线查看app数据库 amitshekhar.android:debug
            resValue("string", "PORT_NUMBER", "9000")
        }
    }


}

/* 针对greenDao的一些配置 */
greendao {

    schemaVersion 1 //数据库版本
    //The current version of the database schema. This is used by the *OpenHelpers classes to migrate between schema versions. If you change your entity/database schema, this value has to be increased. Defaults to 1.

    daoPackage 'com.haxi.mh'
    // The package name for generated DAOs, DaoMaster, and DaoSession. Defaults to the package name of your source entities

    //targetGenDir  //生成的根目录
    //The location where generated sources should be stored at. Defaults to the generated source folder inside the build directory ( build/generated/source/greendao).

    generateTests true // Set to true to automatically generate unit tests. 是否进行单元测试

//    targetGenDirTests //生成的单元测试根目录
// The base directory where generated unit tests should be stored at. Defaults to src/androidTest/java.

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.0.2'
    implementation 'com.android.support:design:27.0.2'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

    /* butterKnife */
    compile 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

    /* gson */
    compile 'com.google.code.gson:gson:2.8.2'

    /* Glide */
    implementation 'com.github.bumptech.glide:glide:4.4.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.4.0'

    /* EventBus */
    compile 'org.greenrobot:eventbus:3.1.1'

    /* greendao */
    compile 'org.greenrobot:greendao:3.2.2'

    /* rxjava2 */
    compile 'io.reactivex.rxjava2:rxjava:x.y.z'

    /* retrofit */
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'//增加返回值为Gson的支持(以实体类返回)
    compile 'com.squareup.retrofit2:converter-scalars:2.3.0'//增加返回值为String的支持
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'//增加返回值为Oservable<T>的支持
    compile 'com.squareup.okhttp3:logging-interceptor:3.9.1'//okhttp3拦截器

    /* RxAndroid: Reactive Extensions for Android */
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'

    // Because RxAndroid releases are few and far between, it is recommended you also
    compile 'io.reactivex.rxjava2:rxjava:2.1.7'

    // explicitly depend on RxJava's latest version for bug fixes and new features.

    /* rxlifecycle2 */
    compile 'com.trello.rxlifecycle2:rxlifecycle:2.2.1'
    compile 'com.trello.rxlifecycle2:rxlifecycle-components:2.2.1'

    // If you want pre-written Activities and Fragments you can subclass as providers

    /* logger */
    compile 'com.orhanobut:logger:2.1.1'

    //运行时权限

    /* easypermissions */
    implementation 'pub.devrel:easypermissions:1.1.0'

    /* PermissionsDispatcher */
    compile('com.github.hotchemi:permissionsdispatcher:3.0.1') {
        exclude module: "support-v13"
        // if you don't use android.app.Fragment you can exclude support for them
    }
    annotationProcessor "com.github.hotchemi:permissionsdispatcher-processor:3.0.1"

    /* 收集错误日志 */
    compile 'com.tencent.bugly:crashreport:latest.release'

    //其中latest.release指代最新Bugly SDK版本号，也可以指定明确的版本号，例如2.1.9
    compile 'com.tencent.bugly:nativecrashreport:latest.release'

    //其中latest.release指代最新Bugly NDK版本号，也可以指定明确的版本号，例如3.0

    /* debug 在线查看app数据库 */
    debugCompile 'com.amitshekhar.android:debug-db:1.0.0'

    /* facebook.stetho 查看数据库 拦截网络请求 */
    compile 'com.facebook.stetho:stetho:1.5.0'

    /* 格式化拼音 */
    compile 'com.belerweb:pinyin4j:2.5.1'

    /* Walle（瓦力）：Android Signature V2 Scheme签名下的新一代渠道包打包神器 */
    compile 'com.meituan.android.walle:library:1.1.5'

}


walle {
    // 指定渠道包的输出路径
    apkOutputFolder = new File("${project.buildDir}/outputs/channels");
    // 定制渠道包的APK的文件名称
    apkFileNameFormat = '${appName}-${packageName}-${channel}-${buildType}-v${versionName}-${versionCode}-${buildTime}.apk';
    // 渠道配置文件
    channelFile = new File("${project.getProjectDir()}/channel")
}