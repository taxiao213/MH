apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao' // apply plugin
apply plugin: 'walle'
android {
    compileSdkVersion 27
    buildToolsVersion "26.0.2"
    defaultConfig {
        applicationId "com.haxi.mh"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 3
        versionName "1.0.3"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        // dex突破65535的限制
        multiDexEnabled true
        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi', 'x86' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }

    compileOptions{
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    //分包兼容低版本
    dexOptions {
        javaMaxHeapSize "4g"
        jumboMode = true
    }

    //签名 引用位置
    signingConfigs {
        config {
            storeFile file("E:\\project\\mh.jks")
            storePassword "mh123456"
            keyAlias "key_mh"
            keyPassword "mh123456"
            v2SigningEnabled true
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java', 'src/main/aidl']
            resources.srcDirs = ['src/main/java', 'src/main/aidl']
            aidl.srcDirs = ['src/main/aidl']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['src/main/assets']
        }
    }

    buildTypes {

        release {
            //混淆
            minifyEnabled true
            //移除无用的resource文件
            shrinkResources true
            //Zipalign优化
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
//            android.applicationVariants.all { variant ->
//                variant.outputs.all { output ->
//                    def outputFile = output.outputFile
//                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                        def versionName = variant.versionName
//                        def flavor = variant.productFlavors[0].name
//                        def date = new Date()
//                        def currentDate = date.format('yyyy_MM_dd_HH_mm')
//                        // 输出apk名称为app_honry_debug_v1.4.7_2018_01_17_16_22.apk
//                        def fileName = "app_" + flavor + "_debug_" + versionName + "_" + currentDate + ".apk"
//                        outputFileName = new File(outputFile.parent, fileName)
//                    }
//                }
//            }
        }

        debug {
            signingConfig signingConfigs.config
        }

        debug { //在线查看app数据库 amitshekhar.android:debug
            resValue("string", "PORT_NUMBER", "9000")
        }
    }

//传统打包
//    flavorDimensions "fruit"
//    productFlavors{
//        mh{
//           dimension "fruit"
//        }
//    }

    //使用友盟打包
    flavorDimensions "fruit"
//    productFlavors {
//        honry {
//            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "honry"]
//        }
//    }
    productFlavors {
        wandoujia {}
        baidu {}
        c360 {}
        uc {}
        myapp {}
        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        }
    }

}

/* 针对greenDao的一些配置 */
greendao {

    schemaVersion 1 //数据库版本
    //The current version of the database schema. This is used by the *OpenHelpers classes to migrate between schema versions. If you change your entity/database schema, this value has to be increased. Defaults to 1.

    daoPackage 'com.haxi.mh'
    // The package name for generated DAOs, DaoMaster, and DaoSession. Defaults to the package name of your source entities

    //targetGenDir  //生成的根目录
    //The location where generated sources should be stored at. Defaults to the generated source folder inside the build directory ( build/generated/source/greendao).

    generateTests true // Set to true to automatically generate unit tests. 是否进行单元测试

//    targetGenDirTests //生成的单元测试根目录
// The base directory where generated unit tests should be stored at. Defaults to src/androidTest/java.

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.0.2'
    implementation 'com.android.support:design:27.0.2'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    compile 'com.android.support:recyclerview-v7:27.0.2'
    implementation 'com.android.support:cardview-v7:27.0.2'

    /* multidex兼容包，配合AndroidStudio实现了一个APK包含多个dex的功能 */
    compile 'com.android.support:multidex:1.0.2'

    /* butterKnife */
    compile 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

    /* gson */
    compile 'com.google.code.gson:gson:2.8.2'

    /* Glide */
    implementation 'com.github.bumptech.glide:glide:4.4.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.4.0'

    /* EventBus */
    compile 'org.greenrobot:eventbus:3.1.1'

    /* greendao */
    compile 'org.greenrobot:greendao:3.2.2'

    /* rxjava2 */
    compile 'io.reactivex.rxjava2:rxjava:2.1.7'

    /* retrofit */
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'

    //增加返回值为Gson的支持(以实体类返回)
    compile 'com.squareup.retrofit2:converter-scalars:2.3.0'

    //增加返回值为String的支持
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'

    //增加返回值为Oservable<T>的支持
    compile 'com.squareup.okhttp3:logging-interceptor:3.9.1'

    //okhttp3拦截器

    /* RxAndroid: Reactive Extensions for Android */
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'

    // explicitly depend on RxJava's latest version for bug fixes and new features.

    /* rxlifecycle2 */
    compile 'com.trello.rxlifecycle2:rxlifecycle:2.2.1'
    compile 'com.trello.rxlifecycle2:rxlifecycle-components:2.2.1'

    // If you want pre-written Activities and Fragments you can subclass as providers

    /* logger */
    compile 'com.orhanobut:logger:2.1.1'

    //运行时权限

    /* easypermissions */
    implementation 'pub.devrel:easypermissions:1.1.0'

    /* PermissionsDispatcher */

    //        compile('com.github.hotchemi:permissionsdispatcher:3.0.1') {

    //            exclude module: "support-v13"

    //        }

    //        annotationProcessor "com.github.hotchemi:permissionsdispatcher-processor:3.0.1"

    /* bugly收集错误日志 */

    //其中latest.release指代最新Bugly NDK版本号，也可以指定明确的版本号，例如3.0
    compile 'com.tencent.bugly:nativecrashreport:latest.release'

    //其中latest.release指代最新版本号，也可以指定明确的版本号，例如1.3.4 包括crashreport
    compile 'com.tencent.bugly:crashreport_upgrade:latest.release'

    /* debug 在线查看app数据库 */
    debugCompile 'com.amitshekhar.android:debug-db:1.0.1'

    /* facebook.stetho 查看数据库 拦截网络请求 */
    compile 'com.facebook.stetho:stetho:1.5.0'

    /* 格式化拼音 */
    compile 'com.belerweb:pinyin4j:2.5.1'

    /* Walle（瓦力）：Android Signature V2 Scheme签名下的新一代渠道包打包神器 */
    compile 'com.meituan.android.walle:library:1.1.5'

    /* 友盟统计 */
    compile 'com.umeng.analytics:analytics:latest.integration'
    implementation project(':PushSDK')
    implementation project(':matisse')

    /* 微信支付 */
    compile 'com.tencent.mm.opensdk:wechat-sdk-android-with-mta:+'

    /* 百分比布局 */
    compile 'com.android.support:percent:26.0.2'

    /* sqlcipher 加密数据库 */
    compile 'net.zetetic:android-database-sqlcipher:3.5.9@aar'

    /* 小米推送 */
    implementation files('libs/MiPush_SDK_Client_3_6_2.jar')

    /* 华为推送 */
    compile 'com.huawei.android.hms:push:2.6.0.301'

    /* webrtc */
    implementation 'org.webrtc:google-webrtc:1.0.+'

}


walle {
    // 指定渠道包的输出路径
    apkOutputFolder = new File("${project.buildDir}/outputs/channels")
    // 定制渠道包的APK的文件名称
//    apkFileNameFormat = '${appName}-${packageName}-${channel}-${buildType}-v${versionName}-${versionCode}-${buildTime}.apk'
    apkFileNameFormat = '${appName}-${channel}-${buildType}.apk'
    // 渠道配置文件
    channelFile = new File("${project.getProjectDir()}/channel")
}